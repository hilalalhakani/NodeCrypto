name: iOS Build and Test
on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Build and Test
    runs-on: macos-latest

    steps:
      # Set Xcode version
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest
          
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          
      # Restore package cache
      - name: Restore package cache
        uses: actions/cache@v4
        id: packages-cache
        with:
          path: packages_cache
          key: ${{ runner.os }}-packages-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-packages-
          save-always: true
          
      # Enable macros
      - name: Enable macros
        run: defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
        
      # Run tests using the script
      - name: Run tests
        run: ./build_scripts/test.sh
        env:
          HAS_PACKAGES_CACHE_HIT: ${{ steps.packages-cache.outputs.cache-hit == 'true' }}
          
      # Find and upload test results
      - name: Find test results
        if: always()
        run: |
          TEST_LOGS=$(find ~/Library/Developer/Xcode/DerivedData -type d -name "Logs/Test" | head -n 1)
          echo "TEST_LOGS_PATH=${TEST_LOGS}" >> $GITHUB_ENV
          
      - name: Upload test results
        if: always() && env.TEST_LOGS_PATH != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.TEST_LOGS_PATH }}
          
      # Find and upload code coverage
      - name: Generate code coverage report
        if: success()
        run: |
          XCRESULT=$(find ~/Library/Developer/Xcode/DerivedData -type d -name "*.xcresult" | head -n 1)
          if [ -n "$XCRESULT" ]; then
            xcrun xccov view --report --json "$XCRESULT" > coverage.json
            echo "COVERAGE_GENERATED=true" >> $GITHUB_ENV
          fi
          
      - name: Upload coverage report
        if: success() && env.COVERAGE_GENERATED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.json

      # Add test summary to PR
      - name: Add Test Summary
        if: always()
        run: |
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Tests completed" >> $GITHUB_STEP_SUMMARY
