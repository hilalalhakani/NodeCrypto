name: iOS Build and Test
on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Build and Test
    runs-on: macos-latest

    steps:
      # 1. Checkout repository with fetch-depth (reduced from 0 to 1 for faster checkout)
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1

      # 2. Setup Xcode (kept, but consider pinning a version for stability)
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      # 3. Cache Dependencies (improved caching strategy)
      - name: Restore package cache
        uses: actions/cache/restore@v4
        id: packages-cache
        with:
          path: ~/Library/Caches/org.carthage
          key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
          restore-keys: |
            ${{ runner.os }}-carthage-

      # 4. Install SwiftLint (consider moving to a dependency manager like Carthage or SPM for SwiftLint)
      - name: Install SwiftLint
        run: brew install swiftlint

      # 5. Run Tests (kept, assuming the script is optimized)
      - name: Run tests
        run: ./build_scripts/test.sh
        env:
          HAS_PACKAGES_CACHE_HIT: ${{ steps.packages-cache.outputs.cache-hit == 'true' }}

      # 6. Save Package Cache (kept for dependency caching)
      - name: Save package cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: ~/Library/Caches/org.carthage
          key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}

      # 7. Upload Test Results (streamlined to a single step with conditional upload)
      - name: Find and Upload Test Results
        if: always()
        run: |
          TEST_LOGS=$(find ~/Library/Developer/Xcode/DerivedData -type d -name "Logs/Test" | head -n 1)
          if [ -n "$TEST_LOGS" ]; then
            echo "Uploading test results..."
            echo "TEST_LOGS_PATH=${TEST_LOGS}" >> $GITHUB_ENV
            echo "::add-mask::$TEST_LOGS"
            uses: actions/upload-artifact@v4
            with:
              name: test-results
              path: ${{ env.TEST_LOGS_PATH }}
          else
            echo "No test results found to upload."

      # 8. Code Coverage (simplified with direct upload if generated)
      - name: Generate and Upload Code Coverage
        if: success()
        run: |
          XCRESULT=$(find ~/Library/Developer/Xcode/DerivedData -type d -name "*.xcresult" | head -n 1)
          if [ -n "$XCRESULT" ]; then
            xcrun xccov view --report --json "$XCRESULT" > coverage.json
            uses: actions/upload-artifact@v4
            with:
              name: code-coverage
              path: coverage.json
          fi

      # 9. Test Summary (kept as is, for simplicity)
      - name: Add Test Summary
        if: always()
        run: |
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Tests completed" >> $GITHUB_STEP_SUMMARY
